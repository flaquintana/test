{"version":3,"sources":["webpack:///./src/app/security/profile/profile-routing.module.ts","webpack:///./src/app/security/profile/profile.component.html","webpack:///./src/app/security/profile/profile.component.ts","webpack:///./src/app/security/profile/profile.module.ts"],"names":[],"mappings":"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","file":"security-profile-profile-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ProfileComponent } from './profile.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ProfileComponent\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ProfileRoutingModule { }\r\n","module.exports = \"<!-- TITLE -->\\r\\n<div class=\\\"mb-40 mt-40\\\">\\r\\n    <h1>Profilo</h1>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"card\\\">\\r\\n    <form #profileForm=\\\"ngForm\\\" class=\\\"container-fluid mt-20\\\" *ngIf=\\\"user\\\">\\r\\n        <div class=\\\"row justify-content-md-center mt-40 mb-40\\\">\\r\\n            <div class=\\\"col-md-10\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label class=\\\"active\\\" for=\\\"username\\\">Username</label>\\r\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"username\\\" [(ngModel)]=\\\"user.username\\\" name=\\\"username\\\" #username=\\\"ngModel\\\" required disabled>\\r\\n                </div>\\r\\n                <div class=\\\"mt-40\\\">\\r\\n                    <button class=\\\"btn btn-outline-primary\\\" data-toggle=\\\"modal\\\" data-target=\\\"#changePasswordModal\\\">Cambia Password</button>\\r\\n                    <button class=\\\"btn btn-primary pull-right\\\" color=\\\"primary\\\" [disabled]=\\\"profileForm.invalid\\\" (click)=\\\"save(profileForm.valid)\\\">Salva</button>\\r\\n                    <button class=\\\"btn btn-secondary pull-right mr-2\\\" routerLink=\\\"/home\\\">Torna alla Home</button>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </form>\\r\\n</div>\\r\\n<!-- Modal -->\\r\\n<div class=\\\"modal fade\\\" id=\\\"changePasswordModal\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"deleteModalLabel\\\" aria-hidden=\\\"true\\\">\\r\\n        <div class=\\\"modal-dialog modal-dialog-centered\\\" role=\\\"document\\\">\\r\\n            <div class=\\\"modal-content\\\">\\r\\n                <div class=\\\"modal-header\\\">\\r\\n                    <h5 class=\\\"modal-title\\\" id=\\\"exampleModalLabel\\\"><i class=\\\"fa fa-lock\\\"></i>&nbsp;&nbsp;Cambia password</h5>\\r\\n                    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-label=\\\"Close\\\">\\r\\n                        <span aria-hidden=\\\"true\\\">&times;</span>\\r\\n                      </button>\\r\\n                </div>\\r\\n                <form #changePasswordForm=\\\"ngForm\\\" class=\\\"container-fluid\\\">\\r\\n                    <div class=\\\"modal-body\\\">\\r\\n                        <div class=\\\"row justify-content-md-center\\\">\\r\\n                            <div class=\\\"col-10\\\">\\r\\n                                <div class=\\\"form-group\\\">\\r\\n                                    <label for=\\\"passwordOld\\\">Vecchia Password</label>\\r\\n                                    <input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"passwordOld\\\" [(ngModel)]=\\\"passwordOld\\\" name=\\\"passwordOld\\\" #passwordOldForm=\\\"ngModel\\\" required>\\r\\n                                </div>\\r\\n                                <div class=\\\"form-group\\\">\\r\\n                                    <label for=\\\"passwordNew\\\">Nuova Password</label>\\r\\n                                    <input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"passwordNew\\\" [(ngModel)]=\\\"passwordNew\\\" name=\\\"passwordNew\\\" #passwordNewForm=\\\"ngModel\\\" required>\\r\\n                                </div>\\r\\n                                <div class=\\\"form-group\\\">\\r\\n                                    <label for=\\\"passwordNewConfirm\\\">Conferma Nuova Password</label>\\r\\n                                    <input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"passwordNewConfirm\\\" [(ngModel)]=\\\"passwordNewConfirm\\\" name=\\\"passwordNewConfirm\\\" #passwordNewConfirmForm=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid': passwordNew && passwordNewConfirm && passwordNew !== passwordNewConfirm}\\\"\\r\\n                                        required>\\r\\n                                    <p *ngIf=\\\"passwordNew && passwordNewConfirm && passwordNew !== passwordNewConfirm\\\" class=\\\"help-block\\\">Passwords missmatch</p>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </form>\\r\\n                <div *ngIf=\\\"showError\\\" class=\\\"row justify-content-md-center\\\">\\r\\n                    <div class=\\\"alert alert-danger text-left\\\">\\r\\n                        <strong>Errore!</strong> Vecchia password non valida\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div class=\\\"modal-footer\\\">\\r\\n                    <button type=\\\"button\\\" #closeModal class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\">Annulla</button>\\r\\n                    <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" [disabled]=\\\"changePasswordForm.invalid || (passwordAdmin && passwordNewConfirm && passwordNew !== passwordNewConfirm)\\\" (click)=\\\"changePassword()\\\">Salva</button>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\"","// Import Libraries\r\nimport { ActivatedRoute, Params, Router } from '@angular/router';\r\nimport { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\r\nimport { Location } from '@angular/common';\r\nimport { Md5 } from 'ts-md5/dist/md5';\r\n\r\n// Security\r\nimport { SecurityService } from '../services/security.service';\r\nimport { AuthenticationService } from '../authentication.service';\r\nimport { User } from 'src/app/domain/test_db/user';\r\nimport { UserService } from 'src/app/services/user.service';\r\nimport { store } from 'src/app/security/current-user';\r\n\r\n/**\r\n * Edit my profile\r\n */\r\n@Component({\r\n    selector: 'app-profile',\r\n    templateUrl: './profile.component.html',\r\n})\r\nexport class ProfileComponent implements OnInit {\r\n\r\n    user: User;\r\n    passwordOld: string;\r\n    passwordNew: string;\r\n    passwordNewConfirm: string;\r\n    showError: boolean;\r\n    @ViewChild('closeModal') closeModal: ElementRef;\r\n\r\n    constructor(\r\n        private userService: UserService,\r\n        private authenticationService: AuthenticationService,\r\n        private securityService: SecurityService,\r\n        private router: Router,\r\n        private route: ActivatedRoute,\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.route.params.subscribe(params => {\r\n            // Get logged user\r\n            this.authenticationService.getUser().subscribe(user => this.user = user);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Save User\r\n     *\r\n     * @param {boolean} valid Form validity\r\n     */\r\n    save(valid: boolean) {\r\n        if (valid)\r\n            this.userService.update(this.user).subscribe(data => {\r\n                this.userService.get(this.user._id).subscribe(user => {\r\n                    store.setUser(user);\r\n                    this.router.navigateByUrl('/home');\r\n                });\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Change password of user\r\n     */\r\n    changePassword() {\r\n        this.showError = false;\r\n\r\n        // Convert passwords in MD5\r\n        const passwordNew = Md5.hashStr(this.passwordNew).toString();\r\n        const passwordOld = Md5.hashStr(this.passwordOld).toString();\r\n\r\n        // Change password\r\n        this.securityService.changePassword(passwordNew, passwordOld).subscribe(data => {\r\n            this.passwordOld = null;\r\n            this.passwordNew = '';\r\n            this.passwordNewConfirm = '';\r\n            this.showError = false;\r\n            this.closeModal.nativeElement.click();\r\n        }, err => {\r\n            this.showError = true;\r\n        });\r\n    }\r\n}\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ProfileComponent } from './profile.component';\r\nimport { ProfileRoutingModule } from './profile-routing.module';\r\nimport { SharedModule } from '../../shared/shared.module';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ProfileRoutingModule,\r\n    FormsModule,\r\n    SharedModule\r\n  ],\r\n  declarations: [\r\n    ProfileComponent\r\n  ]\r\n})\r\nexport class ProfileModule { }\r\n"],"sourceRoot":""}